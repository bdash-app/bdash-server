// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String   @unique
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens      Token[]
  sessions    Session[]
  icon        String
  accessToken String       @unique
  BdashQuery  BdashQuery[]
  Favorite    Favorite[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql
// enum TokenType {
//   RESET_PASSWORD
// }

model BdashQuery {
  id               Int        @id @default(autoincrement())
  id_hash          String     @unique
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  user             User       @relation(fields: [userId], references: [id])
  userId           Int
  title            String
  description      String     @db.Text
  query_sql        String     @db.Text
  data_source_info String?    @db.Text
  chart_svg        String?    @db.MediumText
  chart_config     String?
  result           String?    @db.MediumText
  Favorite         Favorite[]
}

model Favorite {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  bdashQuery   BdashQuery @relation(fields: [bdashQueryId], references: [id])
  bdashQueryId Int

  @@unique([bdashQueryId, userId])
}
